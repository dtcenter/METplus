# RMM UserScript wrapper
[config]
# All steps, including pre-processing:
#PROCESS_LIST = RegridDataPlane(regrid_obs_olr), RegridDataPlane(regrid_obs_u850), RegridDataPlane(regrid_obs_u200), UserScript(obs_olr_filelist), UserScript(obs_u850_filelist), UserScript(obs_u200_filelist), UserScript(script_rmm)
# Only RMM Analysis script for the observations
PROCESS_LIST = UserScript(script_rmm)

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = VALID

# Format of VALID_BEG and VALID_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
VALID_TIME_FMT = %Y%m%d%H

# Start time for METplus run
VALID_BEG = 2000010100

# End time for METplus run
VALID_END = 2002123000

# Increment between METplus runs in seconds. Must be >= 60
VALID_INCREMENT = 86400

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = 0

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
LOOP_ORDER = processes

# location of configuration files used by MET applications
CONFIG_DIR={PARM_BASE}/use_cases/model_applications/s2s

# Run the obs for these cases
OBS_RUN = True
FCST_RUN = False

# Mask to use for regridding
REGRID_DATA_PLANE_VERIF_GRID = latlon 144 13 -15 0 2.5 2.5

# Method to run regrid_data_plane, not setting this will default to NEAREST
REGRID_DATA_PLANE_METHOD = NEAREST

# Regridding width used in regrid_data_plane, not setting this will default to 1
REGRID_DATA_PLANE_WIDTH = 1

# Input and Output Directories for the OBS, U850, and U200 OLR Files and output text file containing the file list
OBS_OLR_INPUT_DIR = {INPUT_BASE}/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM/ERA
OBS_OLR_INPUT_TEMPLATE = OLR_{valid?fmt=%Y%m%d}.nc
OBS_OLR_OUTPUT_DIR = {OBS_OLR_INPUT_DIR}
OBS_OLR_OUTPUT_TEMPLATE = OLR_files_lead{lead?fmt=%HHH}.txt

OBS_U850_INPUT_DIR = {OBS_OLR_INPUT_DIR}
OBS_U850_INPUT_TEMPLATE = u850_{valid?fmt=%Y%m%d}.nc
OBS_U850_OUTPUT_DIR = {OBS_U850_INPUT_DIR}
OBS_U850_OUTPUT_TEMPLATE = U850_files_lead{lead?fmt=%HHH}.txt

OBS_U200_INPUT_DIR = {OBS_OLR_INPUT_DIR}
OBS_U200_INPUT_TEMPLATE = u200_{valid?fmt=%Y%m%d}.nc
OBS_U200_OUTPUT_DIR = {OBS_U200_INPUT_DIR}
OBS_U200_OUTPUT_TEMPLATE = U200_files_lead{lead?fmt=%HHH}.txt


# Configurations for regrid_data_plane: Regrid OLR to -15 to 15 latitude
[regrid_obs_olr]
# Run regrid_data_plane on forecast data
OBS_REGRID_DATA_PLANE_RUN = {OBS_RUN}

# If true, process each field individually and write a file for each
# If false, run once per run time passing in all fields specified
OBS_DATA_PLANE_ONCE_PER_FIELD = False

# Name of input field to process
OBS_REGRID_DATA_PLANE_VAR1_NAME = olr

# Level of input field to process
OBS_REGRID_DATA_PLANE_VAR1_LEVELS = "({valid?fmt=%Y%m%d_%H%M%S},*,*)"

OBS_REGRID_DATA_PLANE_VAR1_OPTIONS = file_type=NETCDF_NCCF; censor_thresh=eq-999.0; censor_val=-9999.0;

# Name of output field to create
OBS_REGRID_DATA_PLANE_VAR1_OUTPUT_FIELD_NAME = olr

# input and output data directories for each application in PROCESS_LIST
OBS_REGRID_DATA_PLANE_INPUT_DIR = {INPUT_BASE}/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM
OBS_REGRID_DATA_PLANE_OUTPUT_DIR = {OUTPUT_BASE}/s2s/UserScript_fcstGFS_obsERA_RMM/ERA

# format of filenames
# Input ERA Interim
OBS_REGRID_DATA_PLANE_INPUT_TEMPLATE = olr.1x.7920.anom7901.nc
OBS_REGRID_DATA_PLANE_OUTPUT_TEMPLATE = OLR_{valid?fmt=%Y%m%d}.nc


# Configurations for regrid_data_plane: Regrid u850 to -15 to 15 latitude
[regrid_obs_u850]
# Run regrid_data_plane on forecast data
OBS_REGRID_DATA_PLANE_RUN = {OBS_RUN}

# If true, process each field individually and write a file for each
# If false, run once per run time passing in all fields specified
OBS_DATA_PLANE_ONCE_PER_FIELD = False

# Name of input field to process
OBS_REGRID_DATA_PLANE_VAR1_NAME = uwnd

# Level of input field to process
OBS_REGRID_DATA_PLANE_VAR1_LEVELS = "({valid?fmt=%Y%m%d_%H%M%S},*,*)"

OBS_REGRID_DATA_PLANE_VAR1_OPTIONS = file_type=NETCDF_NCCF; censor_thresh=eq-999.0; censor_val=-9999.0;

# Name of output field to create
OBS_REGRID_DATA_PLANE_VAR1_OUTPUT_FIELD_NAME = uwnd850

# input and output data directories for each application in PROCESS_LIST
OBS_REGRID_DATA_PLANE_INPUT_DIR = {INPUT_BASE}/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM
OBS_REGRID_DATA_PLANE_OUTPUT_DIR = {OUTPUT_BASE}/s2s/UserScript_fcstGFS_obsERA_RMM/ERA

# format of filenames
# Input ERA Interim
OBS_REGRID_DATA_PLANE_INPUT_TEMPLATE = uwnd.erai.an.2p5.850.daily.anom7901.nc
OBS_REGRID_DATA_PLANE_OUTPUT_TEMPLATE = u850_{valid?fmt=%Y%m%d}.nc


# Configurations for regrid_data_plane: Regrid u200 to -15 to 15 latitude
[regrid_obs_u200]
# Run regrid_data_plane on forecast data
OBS_REGRID_DATA_PLANE_RUN = {OBS_RUN}

# If true, process each field individually and write a file for each
# If false, run once per run time passing in all fields specified
OBS_DATA_PLANE_ONCE_PER_FIELD = False

# Name of input field to process
OBS_REGRID_DATA_PLANE_VAR1_NAME = uwnd

# Level of input field to process
OBS_REGRID_DATA_PLANE_VAR1_LEVELS = "({valid?fmt=%Y%m%d_%H%M%S},*,*)"

OBS_REGRID_DATA_PLANE_VAR1_OPTIONS = file_type=NETCDF_NCCF; censor_thresh=eq-999.0; censor_val=-9999.0;

# Name of output field to create
OBS_REGRID_DATA_PLANE_VAR1_OUTPUT_FIELD_NAME = uwnd200

# input and output data directories for each application in PROCESS_LIST
OBS_REGRID_DATA_PLANE_INPUT_DIR = {INPUT_BASE}/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM 
OBS_REGRID_DATA_PLANE_OUTPUT_DIR = {OUTPUT_BASE}/s2s/UserScript_fcstGFS_obsERA_RMM/ERA

# format of filenames
# Input ERA Interim
OBS_REGRID_DATA_PLANE_INPUT_TEMPLATE = uwnd.erai.an.2p5.200.daily.anom7901.nc
OBS_REGRID_DATA_PLANE_OUTPUT_TEMPLATE = u200_{valid?fmt=%Y%m%d}.nc


# UserScript which uses MET's timing information to find the OBS OLR files
[obs_olr_filelist]
# Find the files for each time
USER_SCRIPT_RUNTIME_FREQ = RUN_ONCE_FOR_EACH

USER_SCRIPT_COMMAND = {METPLUS_BASE}/parm/use_cases/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM/save_input_files_txt.py {OBS_OLR_INPUT_DIR}/{OBS_OLR_INPUT_TEMPLATE} {OBS_OLR_OUTPUT_DIR}/{OBS_OLR_OUTPUT_TEMPLATE}


# UserScript which uses MET's timing information to find the OBS OLR files
[obs_u850_filelist]
# Find the files for each time
USER_SCRIPT_RUNTIME_FREQ = RUN_ONCE_FOR_EACH

USER_SCRIPT_COMMAND = {METPLUS_BASE}/parm/use_cases/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM/save_input_files_txt.py {OBS_U850_INPUT_DIR}/{OBS_U850_INPUT_TEMPLATE} {OBS_U850_OUTPUT_DIR}/{OBS_U850_OUTPUT_TEMPLATE}


# UserScript which uses MET's timing information to find the OBS OLR files
[obs_u200_filelist]
# Find the files for each time
USER_SCRIPT_RUNTIME_FREQ = RUN_ONCE_FOR_EACH

USER_SCRIPT_COMMAND = {METPLUS_BASE}/parm/use_cases/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM/save_input_files_txt.py {OBS_U200_INPUT_DIR}/{OBS_U200_INPUT_TEMPLATE} {OBS_U200_OUTPUT_DIR}/{OBS_U200_OUTPUT_TEMPLATE}


# Configurations for the RMM analysis script
[user_env_vars]
# Whether to Run the model or obs
RUN_OBS = {OBS_RUN}
RUN_FCST = {FCST_RUN}

# Make OUTPUT_BASE Available to the script
SCRIPT_OUTPUT_BASE = {OUTPUT_BASE}

# Number of obs per day
OBS_PER_DAY = 1

# EOF Filename
OLR_EOF_INPUT_TEXTFILE = {INPUT_BASE}/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM/EOF/rmm_olr_eofs.txt
U850_EOF_INPUT_TEXTFILE = {INPUT_BASE}/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM/EOF/rmm_u850_eofs.txt
U200_EOF_INPUT_TEXTFILE = {INPUT_BASE}/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM/EOF/rmm_u200_eofs.txt

# Textfiles containing a listing of the Input Files for the OLR, U850, and U200
OBS_OLR_RMM_INPUT_TEXTFILE = {OBS_OLR_OUTPUT_DIR}/{OBS_OLR_OUTPUT_TEMPLATE}
OBS_U850_RMM_INPUT_TEXTFILE = {OBS_U850_OUTPUT_DIR}/{OBS_U850_OUTPUT_TEMPLATE}
OBS_U200_RMM_INPUT_TEXTFILE = {OBS_U200_OUTPUT_DIR}/{OBS_U200_OUTPUT_TEMPLATE}

# Output Directory for the plots
# If not set, it this will default to {OUTPUT_BASE}/plots
RMM_PLOT_OUTPUT_DIR = {OUTPUT_BASE}/s2s/UserScript_fcstGFS_obsERA_RMM/plots

# EOF plot information
EOF_PLOT_OUTPUT_NAME = RMM_EOFs
EOF_PLOT_OUTPUT_FORMAT = png

# Phase Plot start date, end date, output name, and format
PHASE_PLOT_TIME_BEG = 2002010100
PHASE_PLOT_TIME_END = 2002123000
PHASE_PLOT_TIME_FMT = {VALID_TIME_FMT}
OBS_PHASE_PLOT_OUTPUT_NAME = obs_RMM_comp_phase
OBS_PHASE_PLOT_OUTPUT_FORMAT = png

# Time Series Plot start date, end date, output name, and format
TIMESERIES_PLOT_TIME_BEG = 2002010100
TIMESERIES_PLOT_TIME_END = 2002123000
TIMESERIES_PLOT_TIME_FMT = {VALID_TIME_FMT}
OBS_TIMESERIES_PLOT_OUTPUT_NAME = obs_RMM_time_series
OBS_TIMESERIES_PLOT_OUTPUT_FORMAT = png


# Configurations for UserScript: Run the RMM Analysis driver
[script_rmm]
# list of strings to loop over for each run time.
# Run the user script once per lead
USER_SCRIPT_RUNTIME_FREQ = RUN_ONCE_PER_LEAD

# Command to run the user script with input configuration file
USER_SCRIPT_COMMAND = {METPLUS_BASE}/parm/use_cases/model_applications/s2s/UserScript_fcstGFS_obsERA_RMM/RMM_driver.py
