[config]
## Configuration-related settings such as the process list, begin and end times, etc.

# List of applications to run - only PlotDataPlane for this case
PROCESS_LIST = PlotDataPlane

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = VALID

# Format of VALID_BEG and VALID_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
VALID_TIME_FMT = %Y%m%d

# Start time for METplus run - must match VALID_TIME_FMT
VALID_BEG = 20200127

# End time for METplus run - must match VALID_TIME_FMT
VALID_END = 20200127

# Increment between METplus runs (in seconds if no units are specified)
#  Must be >= 60 seconds
VALID_INCREMENT = 1M

# List of forecast leads to process for each run time (init or valid)
# If unset, defaults to 0 (don't loop through forecast leads
LEAD_SEQ = 0

PLOT_DATA_PLANE_CUSTOM_LOOP_LIST = north, south

LOOP_ORDER = times

# Verbosity of MET output - overrides LOG_VERBOSITY for PlotDataPlane only
LOG_PLOT_DATA_PLANE_VERBOSITY = 1

PLOT_DATA_PLANE_FIELD_NAME = {PARM_BASE}/use_cases/model_applications/marine_and_coastal/PlotDataPlane_obsHYCOM_coordTripolar/read_tripolar_grid.py {INPUT_BASE}/model_applications/marine_and_coastal/PlotDataPlane_obsHYCOM_coordTripolar/rtofs_glo_2ds_n048_daily_diag.nc ice_coverage {custom} {INPUT_BASE}/model_applications/marine_and_coastal/PlotDataPlane_obsHYCOM_coordTripolar/weight_{custom}.nc

PLOT_DATA_PLANE_TITLE = Tripolar via Python

PLOT_DATA_PLANE_COLOR_TABLE =

PLOT_DATA_PLANE_RANGE_MIN_MAX =


# End of [config] section and start of [dir] section
[dir]

# Input/Output directories can be left empty if the corresponding template contains the full path to the files
PLOT_DATA_PLANE_INPUT_DIR = 
PLOT_DATA_PLANE_OUTPUT_DIR =

# End of [dir] section and start of [filename_templates] section
[filename_templates]

# Template to look for input to PlotDataPlane relative to PLOT_DATA_PLANE_INPUT_DIR
PLOT_DATA_PLANE_INPUT_TEMPLATE = PYTHON_NUMPY

# Template to use to write output from PlotDataPlane
PLOT_DATA_PLANE_OUTPUT_TEMPLATE = {OUTPUT_BASE}/model_applications/marine_and_coastal/PlotDataPlane_obsHYCOM_coordTripolar/HYCOM_iceCoverage_{custom}.ps
