# METPLUS Logging Configuration File.

# To Log or Not To Log, That is the question.

# Configuration file for Controlling and Logging output of the METplus 
# python scripts and External Executables run by METplus such as: 
# MET executables, ncdump, etc ...

# Output in the context of this document refers to both standard error 
# and standard out streams.

# Supported Logging behavior.
# ==========================================================================
# The python scripts always send All output to the terminal.
#
# 1. Everything in one log file. This is the DEFAULT behavior.
#    Send All METplus output to a log file (and terminal).
#    Send each MET executables output to the  METplus log file.
#
# 2. Send All METplus output to a log file (and terminal).
#    Send each MET executables output to its own MET log file.
#    Controlled via LOG_MET_OUTPUT_TO_METPLUS,
#    see Controlling Logging Section
#
# 3. No logging. 
#    Send ALL MET and METplus output to the terminal.
#    (Always USE THIS Setting when running w/ Rocoto, ecflow)
#    Set as, LOG_METPLUS = 
#    see Controlling Logging Section
#
# 4, Controlling MET and METplus output verbosity.
#    100% squelching of all output, (/dev/null) currently not supported.
#    Output can be greatly reduced.
#    Controlled via LOG_MET_VERBOSITY, and LOG_LEVEL
#    see Controlling Logging section

# Controlling Logging and Information
# ==========================================================================
# The METplus Configuration setup, will automatically add the following 
# variables to the final configuration file. 
 
# LOG_TIMESTAMP, based on the LOG_TIMESTAMP_TEMPLATE setting.
# LOG_METPLUS,  IF it is NOT defined, is added unset to 
#               the final conf file. 

# LOG_METPLUS, is the METplus log file written to and includes the 
# path information and filename, /some/dir/metpluslogfile.log
# If you do not include any path information, it will be joined 
# with LOG_DIR.

# LOG_METPLUS, If defined, The value is expanded in the final conf file.
# For example if set as,
# LOG_METPLUS = {LOG_DIR}/metplus.log.{LOG_TIMESTAMP_TEMPLATE}

# LOG_METPLUS is also the controlling ON/OFF switch for logging.

# To TURN OFF LOGGING 
# (No Logging Item 3 in Supported Logging behavior section).
# YOU can either comment out LOG_METPLUS there by not Defining it.
# Or you can Define it and leave it unset.
# LOG_METPLUS = 

# LOGGING variables Section - Set these.
# ==========================================================================

[config]
LOG_DIR = {OUTPUT_BASE}/logs


# LOG_METPLUS - Set the path and METPlus log filename
# You must use LOG_TIMESTAMP_TEMPLATE, IF  you want to add a timestamp,
# and NOT ANY % directives directly, else they are interpreted as literals.
# To Turn OFF ALL Logging, no log files, Don't define or set LOG_METPLUS = 

LOG_METPLUS = {LOG_DIR}/metplus.log.{LOG_TIMESTAMP_TEMPLATE}

# LOG_TIMESTAMP_TEMPLATE, - has specific requirements and usage.
# It Can be used when setting LOG_METPLUS. 
# It sets the desired timestamp format, using strftime % directives.
# ie. = %Y%m%d%H%M , it is interpreted to the current system time.
# It must only contain valid % directives.
LOG_TIMESTAMP_TEMPLATE = %Y%m%d%H%M%S

# LOG_LINE_FORMAT - Defines the formatting of each METplus log output line
# For more information on acceptable values, see the Python documentation for LogRecord
# https://docs.python.org/3/library/logging.html#logging.LogRecord
LOG_LINE_FORMAT = %(asctime)s.%(msecs)03d %(name)s (%(filename)s:%(lineno)d) %(levelname)s: %(message)s
LOG_ERR_LINE_FORMAT = {LOG_LINE_FORMAT}
LOG_DEBUG_LINE_FORMAT = {LOG_LINE_FORMAT}
LOG_INFO_LINE_FORMAT = %(asctime)s.%(msecs)03d %(name)s %(levelname)s: %(message)s

#LOG_LINE_DATE_FORMAT - Defines the formatting of the date in the METplus log output
LOG_LINE_DATE_FORMAT = %m/%d %H:%M:%S

# LOG_TIMESTAMP_USE_DATATIME - Changes what time to use for
# LOG_TIMESTAMP_TEMPLATE. If no, use current clock time in log filenames.
# If LOOP_BY = INIT, use INIT_BEG
# If LOOP_BY = VALID, and use VALID_BEG
LOG_TIMESTAMP_USE_DATATIME = no

# LOG_MET_OUTPUT_TO_METPLUS - a logging switch
# yes: One file to rule them all. Send MET output to the METplus log file. 
# no: Send MET output to there own individual Log files
LOG_MET_OUTPUT_TO_METPLUS = yes

# LOG_MET_VERBOSITY - The MET logging level
# 0 quiet to 5 loud, Verbosity setting for MET output, 2 is default.
LOG_MET_VERBOSITY = 2

# LOG_LEVEL - The Metplus python scripts logging level
# Everything Above the set LOG_LEVEL is sent to stdout.
# To quiet output set LOG_LEVEL to ERROR.
# numeric_value: 0,10,20,30,40,50
# Levels:  NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL = INFO



