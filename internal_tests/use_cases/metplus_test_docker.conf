
# NOTE:
# Conf file for running the Stand Alone wrappers in the METplus docker container
# to run the METplus test use cases.
#
# /metplus is the container mountpoint to the 
# local-disk host parent directory directory of the METplus directory.
# For example if METplus was located on local-disk here: /some/path/METplus
# docker run argument -v would be, /some/path:/metplus

# All paths from within the METplus Docker container
[dir]

# METplus sample input data for  use case testing
INPUT_BASE = /metplus/test.metplus.data

# The MET bin and share directories are under here.
MET_INSTALL_DIR = /usr/local

# This could be written to local-space or docker-space
# writing to local-space on the traivs machine.
OUTPUT_BASE = /metplus/pytmp.docker

TMP_DIR = {OUTPUT_BASE}/tmp


# -------------------------------------------

[config]

#LOG_LINE_FORMAT = %(asctime)s.%(msecs)03d %(name)s (%(filename)s:%(lineno)d) %(levelname)s: %(message)s
#LOG_ERROR_LINE_FORMAT = {LOG_LINE_FORMAT}
#LOG_DEBUG_LINE_FORMAT = {LOG_LINE_FORMAT}
#LOG_INFO_LINE_FORMAT = %(asctime)s.%(msecs)03d %(name)s %(levelname)s: %(message)s

LOG_LINE_FORMAT = %(name)s (%(filename)s:%(lineno)d) %(levelname)s: %(message)s
LOG_ERROR_LINE_FORMAT = {LOG_LINE_FORMAT}
LOG_DEBUG_LINE_FORMAT = {LOG_LINE_FORMAT}
LOG_INFO_LINE_FORMAT = {LOG_LINE_FORMAT}

#LOG_MET_VERBOSITY = 2
#LOG_ASCII2NC_VERBOSITY = 4

# -------------------------------------------

[exe]

# METplus 3.0 metplus_system.conf
#RM = rm
#CUT = cut
#TR = tr
#NCAP2 = ncap2
#CONVERT = convert
#NCDUMP = ncdump

### Below, lines with ###jtest30 was how I ran with metplus30
# However, I see from metplus_system.conf is like above and
# we really no longer need to set any of these ...
#
# NCDUMP_EXE, DO NOT USE module load netcdf it will break
# the tc_pairs binary ... ldd tc_pairs and it cant find lib.netcdf.so.6

# Run which command to determine the paths
# WGRIB2 = /apps/wgrib2/2.0.8/intel/18.0.3.222/bin/wgrib2
###jtest30 WGRIB2 = wgrib2               ;; MUST run module load wgrib2
###jtest30 CUT = /usr/bin/cut
###jtest30 TR = /usr/bin/tr
###jtest30 RM = /usr/bin/rm
# NCAP2 = /apps/nco/4.9.1/intel/18.0.5.274/bin/ncap2
###jtest30 NCAP2 = ncap2                 ;; MUST run module load nco
###jtest CONVERT = /usr/bin/convert

# Note:  met X.X may use met X.X external_libs, ldd ncdump to see this.
# NCDUMP = /contrib/met/X.X/external_libs/bin/ncdump  ;; DO NOT run module load netcdf
# NCDUMP = /contrib/met/9.0_beta3/external_libs/bin/ncdump
# NCDUMP = /apps/netcdf/4.6.1/intel/16.1.150/bin/ncdump  ;; which ncdump, if ml ncdump
# Loadding Anaconda, which ncdump gives you this.
###jtest30 NCDUMP = /contrib/anaconda/anaconda3/latest/bin/ncdump 
# NCDUMP = ncdump   
###jtest30 EGREP = /usr/bin/egrep

# GEMPAKTOCF_BIN = /d1/eyewalluser/bin/GempakToCF
# GEMPAKTOCF=GempakToCF
# GEMPAKTOCF_CLASSPATH={GEMPAKTOCF_BIN}/netcdfAll-4.3.jar:{GEMPAKTOCF_BIN}/.


