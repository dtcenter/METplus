[exe]
# NON-MET executables
WGRIB2 = /usr/local/bin/wgrib2
RM_EXE = /bin/rm
CUT_EXE = /usr/bin/cut
TR_EXE = /usr/bin/tr
NCAP2_EXE =/usr/local/nco/bin/ncap2
CONVERT_EXE =/usr/bin/convert
NCDUMP_EXE = /usr/local/bin/ncdump
EGREP_EXE = /bin/egrep

[dir]
## Input data directories

# This is the location of your input files for METplus
PROJ_DIR = /d1/minnawin/wip
TMP_DIR = /d1/minnawin/wip/tmp
OUTPUT_BASE = /d1/minnawin/point_stat_crow_test
METPLUS_BASE = /home/minnawin/wip/METplus
MET_BUILD_BASE = /usr/local/met-6.1
MET_INSTALL_DIR = /usr/local/met-6.1
PARM_BASE = /home/minnawin/wip/METplus/parm

# Forecast and Obs file input directories (netCDF files)
FCST_INPUT_DIR = /d1/METplus_Mallory/data/gfs
OBS_INPUT_DIR = /d1/minnawin/pb2nc_crow_test/nam/conus_sfc

# Final output directory for point_stat output
POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}/{OBTYPE}

[config]
## LOOP_METHOD
## Options are: processes, times
## Looping by time- runs all items in the PROCESS_LIST for each
## initialization time and repeats until all times have been evaluated.
## Looping by processes- run each item in the PROCESS_LIST for all
## specified initialization times then repeat for the next item in the
## PROCESS_LIST.
LOOP_METHOD = processes

# MET point_stat config file
POINT_STAT_CONFIG_FILE ={PARM_BASE}/met_config/Mallory_PointStatConfig_conus_sfc

## in MET, the output files are named with tool and timing information to
## specify an output prefix string.  If you wish to override this- assign a
## string to the OUTPUT_PREFIX value.  This can be
## helpful when running multiple runs of the same tool. Otherwise, leave this
## empty.
OUTPUT_PREFIX =

LOG_LEVEL = DEBUG
## Configuration-related settings such as the process list, begin and end times, etc.
PROCESS_LIST = PointStat

# For processing by init time or valid time, indicate the start and end hours
# in HH format
START_HOUR = 00
END_HOUR = 23

# Indicate the begin and end date
BEG_TIME = 20170601
END_TIME = 20170630

# Start and end dates are created by combining the date with
# start and end hours (format can be hh, hhmm, or hhmmss.
START_DATE = {BEG_TIME}{START_HOUR}
END_DATE = {END_TIME}{END_HOUR}

# Forecast hour start, end, and interval. Interval is the forecast interval in
# hours.
FCST_HR_START_DATE = 0
FCST_HR_END_DATE =  130
FCST_HR_INTERVAL = 24

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL = gfs
OBTYPE = nam

# Prefix to add to the MET point_stat output file:
# point_stat_PREFIX_HHMMSSL_YYYYMMDD_HHMMSSV.stat
# Leave empty if no prefix is requested
POINT_STAT_OUTPUT_PREFIX =

# Indicate which grid and polygon masking region, if applicable
GRID_MASK = G003
#MASK_POLY = APL, ATC, CAM, CAR, CONUS, EAST, ECA, GLF, GMC, GRB, HWI, LMY,
#MDW, MEX, NAK, NAO, NEC, NMT, NPL, NSA, NWC, PRI, SAO, SEC, SMT, SPL, SWC,
#SWD, WCA, WEST
MASK_POLY = CONUS

# TODO replace this with updated syntax which supports options and other ways
# of defining fields and levels.
# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION where the le
# VAR_LIST = TMP/Z2, RH/Z2, DPT/Z2, UGRD/Z10, VGRD/Z10, PRMSL/Z0

# REGEX PATTERNS
[regex_pattern]
# Regular expressions for files relevant to this use case. Use parentheses
# around any date, cycle and offset time.
OBS_INPUT_FILE_REGEX = .*prepbufr.nam.(2[0-9]{7}).t([0-9]{2})z.tm([0-9]{2}).nc
FCST_INPUT_FILE_REGEX = .*pgbf([0-9]{1,3}).gfs.(2[0-9]{9})

#
#  FILENAME TEMPLATES
#
[filename_templates]
# NOTE: These are EXAMPLE FILENAME TEMPLATES
#

