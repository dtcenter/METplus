[dir]
# This is the location of your input files for METplus
PROJ_DIR = /path/to
TMP_DIR = /path/to
OUTPUT_BASE = /path/to
METPLUS_BASE = /path/to
MET_BUILD_BASE = /usr/local/met-8.0
MET_INSTALL_DIR = /usr/local/met-8.0
PARM_BASE = /path/to

# Forecast and Obs file input directories (netCDF files)
FCST_INPUT_DIR = /d1/METplus_Mallory/data/gfs
OBS_INPUT_DIR = /d1/METplus_Mallory/output_for_testing/grid2obs_metplustest.2/prepbufr

# Final output directory for point_stat output
POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}/{OBTYPE}

[config]
## LOOP_METHOD
## Options are: processes, times
## Looping by time- runs all items in the PROCESS_LIST for each
## initialization time and repeats until all times have been evaluated.
## Looping by processes- run each item in the PROCESS_LIST for all
## specified initialization times then repeat for the next item in the
## PROCESS_LIST.
LOOP_METHOD = processes

# MET point_stat config file
#POINT_STAT_CONFIG_FILE ={PARM_BASE}/met_config/Mallory_PointStatConfig_conus_sfc
POINT_STAT_CONFIG_FILE ={PARM_BASE}/met_config/PointStatConfig_conus_sfc

## in MET, the output files are named with tool and timing information to
## specify an output prefix string.  If you wish to override this- assign a
## string to the OUTPUT_PREFIX value.  This can be
## helpful when running multiple runs of the same tool. Otherwise, leave this
## empty.
OUTPUT_PREFIX =

LOG_LEVEL = DEBUG
## Configuration-related settings such as the process list, begin and end times, etc.
PROCESS_LIST = PointStat

# For processing by init time or valid time, indicate the start and end hours
# in HH format
START_HOUR = 00
END_HOUR = 23

# Indicate the begin and end date
BEG_TIME = 20170601
END_TIME = 20170603

# Start and end dates are created by combining the date with
# start and end hours (format can be hh, hhmm, or hhmmss.
START_DATE = {BEG_TIME}{START_HOUR}
END_DATE = {END_TIME}{END_HOUR}

# Forecast hour start, end, and interval. Interval is the forecast interval in
# hours.
FCST_HR_START = 0
FCST_HR_END =  120
FCST_HR_INTERVAL = 24

# For both pb2nc and point_stat, the obs_window dictionary:
OBS_WINDOW_BEGIN = -2700
OBS_WINDOW_END = 2700


# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL = GFS
OBTYPE = NAM

# Prefix to add to the MET point_stat output file:
# point_stat_PREFIX_HHMMSSL_YYYYMMDD_HHMMSSV.stat
# Leave empty if no prefix is requested
POINT_STAT_OUTPUT_PREFIX =

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
REGRID_TO_GRID = G104

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID = FULL
# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
POINT_STAT_POLY =
POINT_STAT_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = ONLYSF
# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME,
# FCST_VARn_LEVELS,  (optional) FCST_VARn_OPTION

FCST_VAR1_NAME = TMP
FCST_VAR1_LEVELS = Z2

FCST_VAR2_NAME = RH
FCST_VAR2_LEVELS = Z2

FCST_VAR3_NAME = DPT
FCST_VAR3_LEVELS = Z2

FCST_VAR4_NAME = UGRD
FCST_VAR4_LEVELS = Z10

FCST_VAR5_NAME = VGRD
FCST_VAR5_LEVELS = Z10

FCST_VAR6_NAME = TCDC
FCST_VAR6_LEVELS = L0
FCST_VAR6_OPTIONS = GRIB_lvl_typ = 200

FCST_VAR7_NAME = PRMSL
FCST_VAR7_LEVELS = Z0


# REGEX PATTERNS
[regex_pattern]
# Regular expressions for files relevant to this use case. Use parentheses
# around any date, cycle and offset time.
OBS_INPUT_FILE_REGEX = .*prepbufr.nam.(2[0-9]{7}).t([0-9]{2})z.tm([0-9]{2}).nc
OBS_INPUT_DIR_REGEX =
FCST_INPUT_FILE_REGEX = .*pgbf([0-9]{1,3}).gfs.(2[0-9]{9})
FCST_INPUT_DIR_REGEX =


#
#  FILENAME TEMPLATES
#
[filename_templates]
# NOTE: These are EXAMPLE FILENAME TEMPLATES
#

