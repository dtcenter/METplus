name: METplus CI/CD Workflow
on:
  push:
    branches:
      - develop
      - develop-ref
      - 'feature_*'
      - 'main_*'
      - 'bugfix_*'
  pull_request:
    types: [opened, reopened, synchronize]

#defaults:
#  run:
#    shell: bash

jobs:
  job_control:
    name: Decide Jobs To Run
    runs-on: ubuntu-latest
    steps:
      - name: GITHUB_CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Parse Commit Message
        id: status
        run: |
          # set default status for jobs
          run_docs=true
          run_get_image=true
          run_get_input_data=true
          run_unit_tests=true
          run_use_cases=true
          run_save_truth_data=false
          run_new_use_cases_only=false
          run_diff=false

          # run all use cases and save truth data if -ref branch and not PR
          # run all use cases and diff logic for pull request
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            # only run diff logic if pull request INTO develop or main_v*
            # branches, not branches ending with -ref
            if [ "${GITHUB_BASE_REF: -4}" != "-ref" ] && \
              ([ "${GITHUB_BASE_REF:0:7}" == "develop" ] || \
               [ "${GITHUB_BASE_REF:0:6}" == "main_v" ]); then
              run_use_cases=true
              run_new_use_cases_only=false
              run_diff=true
            fi
          elif [ "${GITHUB_HEAD_REF: -4}" == -ref ]; then
            run_use_cases=true
            run_new_use_cases_only=false
            run_save_truth_data=true
          fi

          # check commit messages for skip or force keywords
          commit_msg="${{ github.event.head_commit.message }}"
          if grep -q "ci-skip-all" <<< "$commit_msg"; then
            run_docs=false
            run_get_image=false
            run_get_input_data=false
            run_unit_tests=false
            run_use_cases=false
            run_save_truth_data=false
            run_diff=false
          fi
          if grep -q "ci-skip-get-image" <<< "$commit_msg"; then
            run_get_image=false
          fi
          if grep -q "ci-skip-use-cases" <<< "$commit_msg"; then
            run_use_cases=false
          fi
          if grep -q "ci-new-cases-only" <<< "$commit_msg"; then
            run_new_use_cases_only=true
          fi
          if grep -q "ci-force-diff" <<< "$commit_msg"; then
            run_diff=true
          fi
          if grep -q "ci-force-all-cases" <<< "$commit_msg"; then
            run_use_cases=true
            run_new_use_cases_only=false
          fi
          echo $run_get_image
          touch job_control_status
          echo run_docs=${run_docs} >> job_control_status
          echo run_get_image=${run_get_image} >> job_control_status
          echo run_get_input_data=${run_get_input_data} >> job_control_status
          echo run_unit_tests=${run_unit_tests} >> job_control_status
          echo run_use_cases=${run_use_cases} >> job_control_status
          echo run_save_truth_data=${run_save_truth_data} >> job_control_status
          echo run_new_use_cases_only=${run_new_use_cases_only} >> job_control_status
          echo run_diff=${run_diff} >> job_control_status
      - uses: actions/upload-artifact@v2
        with:
          name: job_control_status
          path: job_control_status
  check_job_status:
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: job_control_status
      - run: less job_control_status
      - run: cat job_control_status >> $GITHUB_ENV
      - run: echo ${{ env.run_use_cases }}
  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: job_control_status
      - run: cat job_control_status >> $GITHUB_ENV
      - uses: actions/checkout@v2
        if: ${{ env.run_docs == 'true' }}
      - uses: actions/setup-python@v2
        if: ${{ env.run_docs == 'true' }}
        with:
          python-version: '3.6'
      - name: Install dependencies
        if: ${{ env.run_docs == 'true' }}
        run: |
          python -m pip install --upgrade python-dateutil requests sphinx sphinx-gallery Pillow
          pip install git+https://github.com/ESMCI/sphinx_rtd_theme@version-dropdown-with-fixes
      - name: Run build_docs.py
        if: ${{ env.run_docs == 'true' }}
        continue-on-error: true
        run: |
          ${GITHUB_WORKSPACE}/docs/build_docs.py skip-doxygen
          mkdir -p artifact/documentation
          cp -r ${GITHUB_WORKSPACE}/docs/_build/html/* artifact/documentation
          cp -r ${GITHUB_WORKSPACE}/docs/_build/warnings.log artifact/doc_warnings.log
          cp artifact/doc_warnings.log artifact/documentation
      - uses: actions/upload-artifact@v2
        with:
          name: METplus_documentation
          path: artifact/documentation
      - uses: actions/upload-artifact@v2
        with:
          name: documentation_warnings.log
          path: artifact/doc_warnings.log
          if-no-files-found: ignore
  get_image:
    name: Docker Setup - Get METplus Image
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: job_control_status
      - run: cat job_control_status >> $GITHUB_ENV
      - uses: actions/checkout@v2
        if: ${{ env.run_get_image == 'true' }}
      - uses: actions/setup-python@v2
        if: ${{ env.run_get_image == 'true' }}
        with:
          python-version: '3.6'
      - name: Get METplus Image
        if: ${{ env.run_get_image == 'true' }}
        run: ${GITHUB_WORKSPACE}/ci/jobs/docker_setup.sh
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  update_data_volumes:
    name: Docker Setup - Update Data Volumes
    runs-on: ubuntu-latest
    needs: job_control
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: job_control_status
      - run: cat job_control_status >> $GITHUB_ENV
      - uses: actions/checkout@v2
        if: ${{ env.run_get_input_data == 'true' }}
      - uses: actions/setup-python@v2
        if: ${{ env.run_get_input_data == 'true' }}
        with:
          python-version: '3.6'
      - name: Install dependencies
        if: ${{ env.run_get_input_data == 'true' }}
        run: python -m pip install --upgrade pip python-dateutil requests bs4
      - name: Update Data Volumes
        if: ${{ env.run_get_input_data == 'true' }}
        run: ${GITHUB_WORKSPACE}/ci/jobs/docker_update_data_volumes.py
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  unit_tests:
    name: Unit Tests - Pytest
    runs-on: ubuntu-latest
    needs: get_image
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: job_control_status
      - run: cat job_control_status >> $GITHUB_ENV
      - uses: actions/checkout@v2
        if: ${{ env.run_unit_tests == 'true' }}
      - uses: ./ci/actions/run_tests
        if: ${{ env.run_unit_tests == 'true' }}
        with:
          categories: pytests
  use_case_tests:
    name: Use Case Tests
    runs-on: ubuntu-latest
    #needs: [get_image, update_data_volumes]
    needs: [get_image]
    strategy:
      fail-fast: false
      matrix:
        categories:
#          - "met_tool_wrapper:0-53"
          - "air_quality_and_comp:0"
#          - "climate:0-1"
#          - "convection_allowing_models:0"
#          - "convection_allowing_models:1"
#          - "convection_allowing_models:2-6"
#          - "convection_allowing_models:7"
#          - "convection_allowing_models:8"
#          - "cryosphere:0"
#          - "data_assimilation:0"
#          - "marine_and_coastal:0"
#          - "medium_range:0"
#          - "medium_range:1-2"
#          - "medium_range:3-5"
#          - "medium_range:6"
#          - "medium_range:7-8"
#          - "precipitation:0"
#          - "precipitation:1"
#          - "precipitation:2"
#          - "precipitation:3-8"
#          - "s2s:0"
#          - "space_weather:0-1"
#          - "tc_and_extra_tc:0-2"
          - "met_tool_wrapper:54:NEW"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: job_control_status
      - run: cat job_control_status >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - uses: ./ci/actions/run_tests
        id: run_tests
        if: ${{ env.run_use_cases == 'true' && (endsWith(matrix.categories, ':NEW') || !env.run_new_use_cases_only) }}
        #if: ${{ endsWith(matrix.categories, ':NEW') && env.run_new_use_cases_only }}
        with:
          categories: ${{ matrix.categories }}

      # copy output data to save as artifact
      - name: Save output data
        id: save-output
        if: ${{ always() && steps.run_tests.conclusion != 'skipped' }}
        run: |
          artifact_name=`${GITHUB_WORKSPACE}/ci/jobs/get_artifact_name.sh ${{matrix.categories}}`
          mkdir -p artifact/${artifact_name}
          cp -r ${GITHUB_WORKSPACE}/../output/* artifact/${artifact_name}/
          echo ::set-output name=artifact_name::${artifact_name}
          if [ "$( ls -A ${GITHUB_WORKSPACE}/../diff)" ]; then
            mkdir -p artifact/diff-${artifact_name}
            cp -r ${GITHUB_WORKSPACE}/../diff/* artifact/diff-${artifact_name}/
            echo ::set-output name=upload_diff::true
          else
            echo ::set-output name=upload_diff::false
          fi
          if [ "$( ls -A ${GITHUB_WORKSPACE}/../error_logs)" ]; then
            mkdir -p artifact/error_logs
            cp -r ${GITHUB_WORKSPACE}/../error_logs/* artifact/error_logs
            echo ::set-output name=upload_error_logs::true
          else
            echo ::set-output name=upload_error_logs::false
          fi
      - uses: actions/upload-artifact@v2
        if: ${{ always() && steps.run_tests.conclusion != 'skipped' }}
        with:
          name: ${{ steps.save-output.outputs.artifact_name }}
          path: artifact/${{ steps.save-output.outputs.artifact_name }}
      - uses: actions/upload-artifact@v2
        if: ${{ always() && steps.save-output.outputs.upload_error_logs }}
        with:
          name: error_logs
          path: artifact/error_logs
          if-no-files-found: ignore
      - uses: actions/upload-artifact@v2
        if: ${{ always() && steps.save-output.outputs.upload_diff }}
        with:
          name: diff-${{ steps.save-output.outputs.artifact_name }}
          path: artifact/diff-${{ steps.save-output.outputs.artifact_name }}
          if-no-files-found: ignore
  create_output_data_volumes:
    name: Create Output Docker Data Volumes
    runs-on: ubuntu-latest
    needs: [use_case_tests]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: job_control_status
      - run: cat job_control_status >> $GITHUB_ENV
      - uses: actions/checkout@v2
        if: ${{ env.run_save_truth_data == 'true' }}
      - uses: actions/download-artifact@v2
        if: ${{ env.run_save_truth_data == 'true' }}
      - run: ci/jobs/create_output_data_volumes.sh
        if: ${{ env.run_save_truth_data == 'true' }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
